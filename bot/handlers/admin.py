import datetime
import logging
import os

import aiofiles
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from tabulate import tabulate

from bot.config import admins, TOKEN, DOWNLOADS_DIR
from bot.keyboards import get_main_keyboard, delete_files_keyboard
from database.services import create_subscription_plan, get_plans, update_plan_activity, give_sub, get_sub_users_info

admin_router = Router()


logger = logging.getLogger('Admin')


@admin_router.message(Command('help'))
async def get_help(message: Message):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/help`')
    if message.from_user.id not in admins:
        return

    admin_commands = {
        '/help': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
        '/info': '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö',
        '/add_plan': '–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω.\n'
                     '–í–≤–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –¶–µ–Ω–∞ –≤ $, –£—Ä–æ–≤–µ–Ω—å (1 / 2), –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.\n'
                     '–ü—Ä–∏–º–µ—Ä:\n`/add_plan 30 90 1 –ü–æ–¥–ø–∏—Å–∫–∞ 1 —É—Ä–æ–≤–Ω—è –Ω–∞ 30 –¥–Ω–µ–π –∑–∞ 90$`',
        '/plans': '–í—ã–≤–µ—Å—Ç–∏ –∏–º–µ—é—â–∏–µ—Å—è –≤ –ë–î –ø–ª–∞–Ω—ã.',
        '/plan_off': '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–æ ID –∏–∑ –ë–î.\n–ü—Ä–∏–º–µ—Ä: `/plan_off 2`',
        '/plan_on': '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–æ ID –∏–∑ –ë–î.\n–ü—Ä–∏–º–µ—Ä: `/plan_on 2`',
        '/give_sub': '–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n'
                     '–í–≤–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –¢–µ–ª–µ–≥—Ä–∞–º ID, –¢–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º, '
                     '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO), –î–æ—Å—Ç—É–ø –∫ —Å–∫—Ä–∏–ø—Ç–∞–º (–¥–∞/–Ω–µ—Ç)\n'
                     '–ü—Ä–∏–º–µ—Ä:\n`/give_sub 310832640 MrOatmeal 2025-10-05 –î–∞`',
        '/delete': '–£–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç(—ã).\n',
    }

    help_text = '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n'
    help_text += '\n\n'.join(f'**`{cmd}`** ‚Äî {desc}' for cmd, desc in admin_commands.items())
    help_text += ('\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É **.zip** –∏–ª–∏ **.rar** –∞—Ä—Ö–∏–≤.\n'
                  '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 45 —Å–∏–º–≤–æ–ª–æ–≤.')
    await message.answer(help_text, parse_mode='Markdown')


@admin_router.message(Command('add_plan'))
async def add_plan(message: Message):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/add_plan`')

    if message.from_user.id not in admins:
        return

    data = message.text.split()
    try:
        days, price, level, text = int(data[1]), int(data[2]), int(data[3]), str(' '.join(data[4:]))
    except Exception:
        await message.reply('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        return

    new_plan = await create_subscription_plan(days, price, level, text)
    await message.reply(
        f'–ü–ª–∞–Ω {new_plan.id} –¥–æ–±–∞–≤–ª–µ–Ω:\n'
        f'{new_plan.subscription_time} –¥–Ω–µ–π –∑–∞ {new_plan.price}$',
        reply_markup= await get_main_keyboard(telegram_id=message.from_user.id),
    )
    return


@admin_router.message(Command('plans'))
async def plans_list(message: Message):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/plans`')

    if message.from_user.id not in admins:
        return

    plans = await get_plans()
    await message.reply('–ü–ª–∞–Ω—ã –≤ –±–¥:\n\n', reply_markup= await get_main_keyboard(telegram_id=message.from_user.id))
    for i, plan in enumerate(plans):
        plan_info = (f'id: {plan.id}\n'
                     f'–ö–æ–ª-–≤–æ –¥–Ω–µ–π: {plan.subscription_time}\n'
                     f'–¶–µ–Ω–∞: {plan.price}$\n'
                     f'v: {plan.level}\n'
                     f'–¢–µ–∫—Å—Ç: {plan.text}\n'
                     f'–ê–∫—Ç–∏–≤–µ–Ω: {plan.is_active}\n'
                     f'\n')
        await message.answer(plan_info)

    return


@admin_router.message(Command('plan_off'))
async def off_plan(message: Message):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/plan_off`')

    if await _change_plan(message, False):
        await message.reply('–ü–ª–∞–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', reply_markup= await get_main_keyboard(telegram_id=message.from_user.id))
    return


@admin_router.message(Command('plan_on'))
async def on_plan(message: Message):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/plan_on`')

    if await _change_plan(message, True):
        await message.reply('–ü–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', reply_markup= await get_main_keyboard(telegram_id=message.from_user.id))
    return


async def _change_plan(message: Message, active: bool):
    if message.from_user.id not in admins:
        return False

    data = message.text.split()

    try:
        plan_id = int(data[1])
    except Exception:
        await message.reply('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        return False
    await update_plan_activity(plan_id, active=active)

    return True


@admin_router.message(Command('give_sub'))
async def give_subscription(message: Message):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/give_sub`')

    if message.from_user.id not in admins:
        return False

    data = message.text.split()

    try:
        tg_id, tg_username, end_date, scripts = int(data[1]), str(data[2]).strip('@'), str(data[3]), str(data[4])
        end_date = datetime.date.fromisoformat(end_date)
    except Exception as e:
        await message.reply(f'–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}')
        return False

    scripts_allowance = True if scripts.strip().lower() == '–¥–∞' else False
    if await give_sub(tg_id, tg_username, end_date, scripts_allowance):
        await message.reply(f'–í—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø {tg_username} –¥–æ {end_date}')
        return True
    await message.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


@admin_router.message(Command('info'))
async def users_info(message: Message):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/info`')

    if message.from_user.id not in admins:
        return False
    infos = await get_sub_users_info()

    table_data = [
        [
            i + 1,
            user.telegram_username,
            str(user.telegram_id),
            user.registered_at.strftime('%Y-%m-%d'),
            user.end_time.strftime('%Y-%m-%d') if user.end_time else '‚Äî',
            user.scripts_end_time.strftime('%Y-%m-%d') if user.scripts_end_time else '‚Äî',
        ]
        for i, user in enumerate(infos)
    ]

    table_str = tabulate(
        table_data,
        headers=['#', 'Username', 'Telegram ID', 'Registered', 'Sub End', 'Scripts End'],
        tablefmt='github'
    )

    max_length = 4096
    parts = [table_str[i:i + max_length] for i in range(0, len(table_str), max_length)]

    for part in parts:
        await message.answer(f'<pre>{part}</pre>', parse_mode='HTML')


@admin_router.message(F.document)
async def handle_document(message: Message, bot: Bot):
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª...')

    if message.from_user.id not in admins:
        logger.info(f'{message.from_user.username} ({message.from_user.id}) –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã')
        await message.answer(f'–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã')
        return

    file_id = message.document.file_id
    file_name = message.document.file_name.strip()
    if not (file_name.endswith('.zip') or file_name.endswith('.rar')):
        msg = f'{file_name} - –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ <b>zip</b> –∏ <b>rar</b>'
        logger.error(msg)
        await message.answer(msg)
        return
    if len(file_name) > 45:
        msg = f'{file_name} - –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ <b>45</b> —Å–∏–º–≤–æ–ª–æ–≤'
        logger.error(msg)
        await message.answer(msg)
        return

    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path

    file_content = await bot.download_file(file_path)

    save_dir = f'./{DOWNLOADS_DIR}'
    os.makedirs(save_dir, exist_ok=True)
    save_path = f'./{DOWNLOADS_DIR}/{file_name}'
    async with aiofiles.open(save_path, 'wb') as f:
        await f.write(file_content.read())

    logger.info(f'{message.from_user.username} ({message.from_user.id}) –∑–≥—Ä—É–∑–∏–ª —Å–∫—Ä–∏–ø—Ç {file_name}')
    await message.answer(f'–§–∞–π–ª <b>{file_name}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ')


@admin_router.message(Command('delete'))
async def delete_files(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –ø–∞–ø–∫–∏ scripts."""
    logger.info(f'{message.from_user.username} ({message.from_user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/delete`')

    if message.from_user.id not in admins:
        await message.answer(f'–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã')
        return
    await message.answer('üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:', reply_markup=delete_files_keyboard())


@admin_router.callback_query(F.data.startswith('del_file_'))
async def delete_file_callback(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    if callback.from_user.id not in admins:
        await callback.message.answer(f'–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã')
        return

    file_name = callback.data[len('del_file_'):]
    file_path = os.path.join(DOWNLOADS_DIR, file_name)

    if os.path.exists(file_path):
        os.remove(file_path)
        await callback.message.answer(f'‚úÖ –§–∞–π–ª `{file_name}` —É–¥–∞–ª—ë–Ω.')
        logger.info(
            f'{callback.message.from_user.username} ({callback.message.from_user.id}) —É–¥–∞–ª–∏–ª —Ñ–∞–π–ª {file_name}'
        )
    else:
        await callback.message.answer('‚ö† –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    await callback.answer()
